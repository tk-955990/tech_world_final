package fainal_kadai;

public class Final_specification {

}
/* 　　　　　　　仕様
　１　ルール
　　　
　　　①　初期配置
　　　　　8×8の盤面に黒白 2 個ずつ石をクロスさせ、黒が左手前になるように配置する
　　　
　　　②　黒が先手，白が後手

　　　③　盤上にある自分の色の石と，これから打つ自分の石で
　　　　相手の色の石を挟める場所に石を打たなければならない

　　　④　挟んだ石をすべて裏返さなければならない

　　　⑤　有効な手を打つことができなかった場合はパスで，プレイヤーは交代

　　　⑥　盤面が石でいっぱいになった場合、
　　　　またはどちらのプレイヤーも有効な手を打てなかった場合、ゲームは終了

　　　⑦　盤面上に最も多くの石を置いたプレイヤーが勝ち

　２　変数
　　　
　　　盤面、石、色、自分（プレーヤー）、手、有効、パス、勝ち、先手　　

　　　盤面　int[][] field = new int[8][8];
      石　　String[][]　stoneB = "〇”;
            String[][]  stoneW = "●";
      プレイヤー　 String　player
      手　　？？？
      有効　boolean  judge = true;
      勝利判定　boolean win = true;
      順番　int turn = 0;
      
   3  メソッド
   
      setFourStone();  // 石の初期配置
      
   オセロ仕様

１　オセロの情報
　String　white　＝"〇”
　　　　　black　＝“●”
　２ボードの情報
　String　board[][]
３　ボードの初期配置
　黒が手前
４　コマの置く場所の入力（Scanners）
　inputX
　inputY　　　　　　　
　*　X軸Y軸それぞれ１~８、A~Bで入力範囲を指定
　　半角英数字以外の入力はエラー表示
５　白、黒それぞれのコマのカウント
　番外に表示
６　ボードの情報変化　　　　　
　　　　　　　　　　　　　　→→→→→ー－－－－－－－－－－－－－－－－－－－－－－ー－－－－－－－－－－↓
　　　　　　　　　　　　　　↑　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　↓　　　　　　　　　　
　　　　　　　　　　　　　　↑　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　↓
                           ↑　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　↓
　　　　　　　　   　　　（自分の色）　　　　　　　　　　　　　(空白またはボードの端）→→→ー－－－－→→↓
　　　　　　　　　　　　　　↑　　　　　　　　　　　　　　　　　　さらに隣のコマの　　　　　　　　　　　　　↓　　　　　　　　　　　　　　　　　　↓
　ボードの情報→→　コマを置いた　→→（敵の色）→→色を変える→→  色を判定　　　→→（自分の色）→→色はそのまま　
　　　　　　　　　　マスの隣の判定　　　　　　　　 　　　↑　　　　　　　↓　　　　　　　　　　　　　　　　↑
　　　　　　　　　　　　　　↓　　　　　　　　　　　　　　↑　　　　　　　↓　　　　　　　　　　　　　　　　↑
　　　　　　　　　（空白またはボードの端）　　　　　　 　↑　　　　　　　↓　　　　　　　　　　　　　　　　↑
　　　　　　　　　　　　　　↓　　　　　　　　　　　　　　↑　　　　　（敵の色）　　　　　　　　　　　　　　↑
　　　　　　　　　　　　　　↓　　　　　　　　　　　　　　↑　　　　　　　↓　　　　　　　　　　　　　　　　↑
　　　　　　　　　　　　　　↓　　　　　　　　　　　　　　←←←←ー－－－　　   　　　　　　　　　　　　　  ↑
　　　　　　　　　　　　　　→→ー－－－－－－－－－－－－－－－－－－－－－－－－－－－－－ー－→→－－－↑

７　勝利判定
　　置けるマスがない
　　　　　　　　　　　　　　　　　　　　　  
            
*/